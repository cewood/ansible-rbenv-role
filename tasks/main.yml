---
- name: Include env vars
  include_vars: "{{ rbenv.env }}.yml"

- name: Apt specific tasks
  include: apt_build_depends.yml
  when: ansible_pkg_mgr == 'apt'

- name: Yum specific tasks
  include: yum_build_depends.yml
  when: ansible_pkg_mgr == 'yum'

# - name: Pacman specific tasks
#   include: pacman_build_depends.yml # Arch Linux
#   when: ansible_pkg_mgr == 'pacman'

- name: Homebrew specific tasks
  include: homebrew_build_depends.yml
  when: ansible_os_family == 'Darwin'

- name: Git clone rbenv
  git: >
    repo={{ rbenv_repo }}
    dest={{ rbenv_root }}
    version={{ rbenv.version }}
    accept_hostkey=true
  tags:
    - rbenv

- name: Create plugins directory
  file: state=directory path={{ rbenv_root }}/plugins
  tags:
    - rbenv

- name: install plugins
  git: >
    repo={{ item.repo }}
    dest={{ rbenv_root }}/plugins/{{ item.name }}
    version={{ item.version }}
    accept_hostkey=true
  with_items: rbenv_plugins
  tags:
    - rbenv

- name: Initialise rbenv
  lineinfile:
    dest: '~/.bashrc'
    line: "{{ item }}"
  with_items:
    - 'export PATH="$HOME/.rbenv/bin:$PATH"'
    - 'eval "$(rbenv init -)"'
  tags:
    - rbenv

- name: set default-gems
  copy: src=default-gems dest={{ item.home }}/.rbenv/default-gems
  with_items: rbenv_users
  sudo: true
  sudo_user: "{{ item.name }}"
  when: not "system" == "{{ rbenv.env }}"
  ignore_errors: true
  tags:
    - rbenv

- name: set gemrc
  copy: src=gemrc dest={{ item.home }}/.gemrc
  with_items: rbenv_users
  sudo: true
  sudo_user: "{{ item.name }}"
  when: not "system" == "{{ rbenv.env }}"
  ignore_errors: true
  tags:
    - rbenv

- name: set vars
  copy: src=vars dest={{ item.home }}/.rbenv/vars
  with_items: rbenv_users
  sudo: true
  sudo_user: "{{ item.name }}"
  when: not "system" == "{{ rbenv.env }}"
  ignore_errors: true
  tags:
    - rbenv

- name: check ruby {{ rbenv.ruby_version }} installed
  shell: bash -lc "rbenv versions | grep {{ rbenv.ruby_version }}"
  register: ruby_installed
  changed_when: false
  ignore_errors: yes
  tags:
    - rbenv

- name: install ruby {{ rbenv.ruby_version }}
  shell: bash -lc "rbenv install {{ rbenv.ruby_version }}"
  register: ruby_installed_now
  when: ruby_installed|failed
  tags:
    - rbenv

- name: set global ruby to {{ rbenv.ruby_version }}
  shell: bash -lc "rbenv global {{ rbenv.ruby_version }} && rbenv rehash"
  when: ruby_installed_now|success
  tags:
    - rbenv

# - name: check ruby {{ rbenv.ruby_version }} installed
#   shell: bash -lc "rbenv versions | grep {{ rbenv.ruby_version }}"
#   sudo: true
#   sudo_user: "{{ item.name }}"
#   with_items: rbenv_users
#   when: not "system" == "{{ rbenv.env }}"
#   register: ruby_installed
#   ignore_errors: yes
#   tags:
#     - rbenv
#
# - name: Debugging
#   debug:
#     msg: item[0].rc
#   with_together:
#     - ruby_installed.results
#     - rbenv_users
#
# - name: chown permission to .rbenv directory
#   shell: "chown -R {{ item[1].name }}:{{ item[1].name }} {{ item[1].home }}/.rbenv"
#   sudo: true
#   with_together:
#     - ruby_installed.results
#     - rbenv_users
#   when: (not "system" == "{{ rbenv.env }}") and (item[0].rc != 0)
#   ignore_errors: true
#   tags:
#     - rbenv
#
# - name: install ruby {{ rbenv.ruby_version }}
#   shell: bash -lc "rbenv install {{ rbenv.ruby_version }}"
#   sudo: true
#   sudo_user: "{{ item[1].name }}"
#   with_together:
#     - ruby_installed.results
#     - rbenv_users
#   when: (not "system" == "{{ rbenv.env }}") and (item[0].rc != 0)
#   ignore_errors: true
#   tags:
#     - rbenv
#
# - name: install ruby {{ rbenv.ruby_version }}
#   shell: bash -lc "rbenv global {{ rbenv.ruby_version }} && rbenv rehash"
#   sudo: true
#   sudo_user: "{{ item[1].name }}"
#   with_together:
#     - ruby_installed.results
#     - rbenv_users
#   when: (not "system" == "{{ rbenv.env }}") and (item[0].rc != 0)
#   ignore_errors: true
#   tags:
#     - rbenv
